<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <task:annotation-driven/>
    <context:component-scan base-package="com.payway.advertising com.payway.commons.webapp" />

    <bean class="com.payway.commons.webapp.config.PaywayCommonVaadinConfiguration" />

    <!-- Обработчик отказов для TaskExecutor'а -->
    <bean id="rejectPolicy" class = "com.payway.commons.webapp.messaging.RejectExecutionPolicy"/>

    <!--
        TaskExecutor для обработки серверных задач.
        Один поток выделяется для получения входящих сообщений.
        Другие потоки - обработка сообщений.
    -->
    <bean id="serverTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10" />
        <property name="maxPoolSize" value="25" />
        <property name="queueCapacity" value="5" />
        <property name="rejectedExecutionHandler" ref="rejectPolicy"/>
    </bean>

    <!-- Сервис хранения карты с контекстами -->
    <bean id="serviceContext" class = "com.payway.commons.webapp.messaging.MessageRequestContextHolderServiceImpl">
        <property name="map">
            <bean class="java.util.concurrent.ConcurrentHashMap"/>
        </property>
    </bean>

    <!-- Сервис отправки сообщений на сервер -->
    <bean id="messageServerSenderService" class = "com.payway.commons.webapp.messaging.MessageServerSenderServiceImpl">
        <property name="messagingClient" ref="messagingClient"/>
        <property name="serviceContext" ref="serviceContext"/>
        <property name="timeOut" value="5"/>
        <property name="timeUnit">
            <value type="java.util.concurrent.TimeUnit">SECONDS</value>
        </property>
    </bean>

    <!-- Обработчик получения ответов с сервера -->
    <bean id="messageServerResponseListener" class = "com.payway.commons.webapp.messaging.MessageServerResponseListener" destroy-method="preDestroy">
        <property name="messagingClient" ref="messagingClient"/>
        <property name="serverTaskExecutor" ref="serverTaskExecutor"/>
        <property name="timeOut" value="20"/>
        <property name="timeUnit">
            <value type="java.util.concurrent.TimeUnit">SECONDS</value>
        </property>
    </bean>

    <!-- Обработчик полученных ответов с сервера -->
    <bean id="messageServerResponseHandler" class = "com.payway.commons.webapp.messaging.MessageServerResponseHandler" scope="prototype" depends-on="serviceContext">
        <property name="serviceContext" ref="serviceContext"/>
    </bean>

    <!-- Объект для работы с файловой системой -->
    <bean id="fileSystemManager" class="org.apache.commons.vfs2.impl.StandardFileSystemManager" scope="prototype" init-method="init"/>

    <!-- Bus exception handler -->
    <bean id="subscriberExceptionHandler" class="com.payway.commons.webapp.bus.SubscriberExceptionHandlerImpl"/>

    <!-- app bus -->
    <bean id="appEventBus" class="com.payway.commons.webapp.bus.AppEventBusImpl">
        <property name="eventBus">
            <bean class="com.google.common.eventbus.AsyncEventBus">
                <constructor-arg name="executor" ref="serverTaskExecutor"/>
                <constructor-arg name="subscriberExceptionHandler" ref="subscriberExceptionHandler"/>
            </bean>
        </property>
    </bean>

    <!-- ui session bus with vaadin scope-->
    <bean id="sessionEventBus" class="com.payway.commons.webapp.ui.bus.SessionEventBusImpl" scope="vaadin-ui">
        <property name="eventBus">
            <bean class="com.google.common.eventbus.EventBus">
                <constructor-arg name="subscriberExceptionHandler" ref="subscriberExceptionHandler"/>
            </bean>
        </property>
    </bean>

    <!-- Contains all file ext's, that may be handled by FileVideoConverterHandler-->
    <util:list id="supportedVideoFileExtensions" list-class="java.util.ArrayList" value-type="java.lang.String">
        <value>avi</value>
        <value>mp4</value>
        <value>ogv</value>
        <value>ogg</value>
        <value>3gp</value>
        <value>wmv</value>
        <value>mpeg</value>
        <value>mpg</value>
    </util:list>

    <!-- Xuggler media container service -->
    <bean id = "formatContainerService" class="com.payway.xuggler.media.core.container.service.impl.XugglerContainerService"/>

    <!-- Begin video converter-->
    <bean id="videoConverter" class="com.payway.xuggler.core.converter.video.impl.XugglerVideoConverter" scope="prototype"/>

    <!-- Video converter will be injected to singleton and every time field called - new bean created -->
    <bean id="prototypeVideoConverterTargetSource" class="org.springframework.aop.target.PrototypeTargetSource">
        <property name="targetBeanName" value="videoConverter" />
    </bean>

    <bean id="proxyVideoConverter" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="targetSource" ref="prototypeVideoConverterTargetSource" />
    </bean>
    <!-- End video converter-->

    <!-- Video file converter handler based on Xuggler-->
    <bean id = "fileVideoConverterHandler" class="com.payway.advertising.core.handlers.FileVideoConverterHandler">
        <property name="supportedVideoFileExtensions" ref="supportedVideoFileExtensions"/>
        <property name="videoConverter" ref="proxyVideoConverter"/>
        <property name="settingsAppService" ref="settingsAppService"/>
    </bean>

    <!-- Destantion file copy handler based -->
    <bean id = "fileDestCopyHandler" class="com.payway.advertising.core.handlers.FileDestCopyHandler">
        <property name="fileSystemManagerService" ref="fileManagerService"/>
        <property name="settingsAppService" ref="settingsAppService"/>
    </bean>

    <!-- Contains all file upload processor handler's, index ordered-->
    <util:list id="fileUploadedHandlers" value-type="com.payway.advertising.core.handlers.FileHandler" list-class="java.util.ArrayList">
        <ref bean="fileVideoConverterHandler"/>
        <ref bean="fileDestCopyHandler"/>
    </util:list>

    <!-- File upload processor task with defined handlers -->
    <bean id = "fileUploadedProcessorTask" class="com.payway.advertising.core.handlers.FileUploadedProcessorTask" scope="prototype">
        <property name="handlers" ref="fileUploadedHandlers"/>
    </bean>

</beans>